// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:fluttertest01/file_and_http/model/user_entity.dart';
import 'package:fluttertest01/generated/json/user_entity_helper.dart';
import 'package:fluttertest01/file_and_http/model/git_model.dart';
import 'package:fluttertest01/generated/json/git_model_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case UserEntity:
        return userEntityFromJson(data as UserEntity, json) as T;
      case UserList:
        return userListFromJson(data as UserList, json) as T;
      case GitModel:
        return gitModelFromJson(data as GitModel, json) as T;
      case GitOwner:
        return gitOwnerFromJson(data as GitOwner, json) as T;
      case GitLicense:
        return gitLicenseFromJson(data as GitLicense, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case UserEntity:
        return userEntityToJson(data as UserEntity);
      case UserList:
        return userListToJson(data as UserList);
      case GitModel:
        return gitModelToJson(data as GitModel);
      case GitOwner:
        return gitOwnerToJson(data as GitOwner);
      case GitLicense:
        return gitLicenseToJson(data as GitLicense);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'UserEntity':
        return UserEntity().fromJson(json);
      case 'UserList':
        return UserList().fromJson(json);
      case 'GitModel':
        return GitModel().fromJson(json);
      case 'GitOwner':
        return GitOwner().fromJson(json);
      case 'GitLicense':
        return GitLicense().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'UserEntity':
        return List<UserEntity>();
      case 'UserList':
        return List<UserList>();
      case 'GitModel':
        return List<GitModel>();
      case 'GitOwner':
        return List<GitOwner>();
      case 'GitLicense':
        return List<GitLicense>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
